apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'jacoco' // Jacoco plugin
apply plugin: "org.sonarqube"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "cm.rulan.distcovid"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

//---------------------- Jacoco

// jacoco configurations
ext {
    coverageSourceDirs = 'app/src/test/java'
}

jacoco {
    toolVersion "0.8.5"
    reportsDir = file("$buildDir/reports")
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco reports for Debug and Build"

    // define type of reports to generate
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }

    def excludeFiles = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewBinder*.*',
            '**/*$InjectAdapter*.*',
            '**/*Injector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
            // '**/*Test*.*',
            // 'android/**/*.*',
            // 'com/**/*.*',
            // 'androidTest/**/*.*',
            // '**/data/model/*'
    ]

    if (project.hasProperty("teamcity")) {
        println '##teamcity[jacocoReport ' +
                'dataPath=\'app/build/jacoco/testDebugUnitTest.exec\' ' +
                'includes=\'com.rulan.project_distcovid.*\' ' +
                'excludes=\'**/R.class **/R$*.class ' +
                '**/*$ViewInjector*.* **/BuildConfig.* **/Manifest*.*\']'
    }

    def debugTree = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: excludeFiles
    )

    def mainSrc = "${project.projectDir}/app/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'app/build/jacoco/testDebugUnitTest.exec'
    ])

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

//--------------- Sonarqube
sonarqube {
    properties {
        property "sonar.projectKey", "dist-covid"
        property "sonar.projectName", "distcovid"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectVersion", "1.0"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java, src/main/res"
        property "sonar.exclusions", "**/R.class,**/R\$*.class,**/BuildConfig.*,**/Manifest*.*,**/*Test*.*,com/**/*.*,androidTest/**/*.*,**/data/model/*"

        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebugUnitTest.exec"
        property "sonar.android.lint.report", "build/outputs/lint-results"
        property "sonar.junit.reportsPath", "build/reports/tests/testDebugUnitTest"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/test-results/testDebugUnitTest/TEST-cm.rulan.distcovid.ExampleUnitTest.xml"
        property 'sonar.java.binaries', 'build'
        property 'sonar.java.test.binaries', 'build'
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // MPAndroidChart
    implementation 'com.github.PhilJay:MPAndroidChart:v3.0.3'

    // Android notification
    implementation "com.android.support:support-compat:29.0.0"

}
